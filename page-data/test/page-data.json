{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/test/","webpackCompilationHash":"5ca0ea7f8d19cd1fdee0","result":{"data":{"site":{"siteMetadata":{"title":"Takumi Ogawa - @ogady","user":{"name":"Takumi Ogawa","github":"ogady","qiita":"ogady","twitter":"gadyma","facebook":"takumi.ogawa.37266","linkedin":"takumi-ogawa-869046195"}}},"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>こんにちは、<a href=\"https://twitter.com/gadyma\">ogady</a>です。</p>\n<p>WordCloudかっこいいですよね！この記事読んでみて、こういうオシャレなやつをGoでやってみたい！と思って作ってみました。</p>\n<p> <a href=\"https://qiita.com/uminchu987/items/07baa1a354cf96d2564b\">[Python]銀河鉄道の夜をWordCloudで可視化してみた！</a></p>\n<p>せっかくなんで青空文庫のAPIを使用して、作品指定してWordCloud生成するCLIツールっぽくしようと思います。</p>\n<p>普段はGoでお堅いバックエンド処理ばっか書いていたので、たまにはこんなことしてみたかった。</p>\n<h2>技術スタック</h2>\n<ul>\n<li>Go1.13</li>\n</ul>\n<h3>使用ライブラリなど</h3>\n<ul>\n<li><a href=\"https://github.com/PuerkitoBio/goquery\">https://github.com/PuerkitoBio/goquery</a></li>\n<li><a href=\"http://github.com/bluele/mecab-golang\">http://github.com/bluele/mecab-golang</a></li>\n<li><a href=\"https://github.com/psykhi/wordclouds\">https://github.com/psykhi/wordclouds</a></li>\n<li><a href=\"https://qiita.com/ksato9700/items/48fd0eba67316d58b9d6\">https://qiita.com/ksato9700/items/48fd0eba67316d58b9d6</a></li>\n</ul>\n<h2>1. MeCab 導入</h2>\n<p>今回は、<a href=\"https://qiita.com/uminchu987/items/07baa1a354cf96d2564b\">@uminchu987さんの記事</a>と同様に、形態素解析にMeCabを使用していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sh line-numbers\"><code class=\"language-sh\"># MeCabインストール\n$ brew insatll mecab mecab-ipadic\n\n# インストール確認\n$ which mecab-config\n/usr/local/bin/mecab-config</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>次に、GoからMeCabを使うためのライブラリ<a href=\"http://github.com/bluele/mecab-golang\">mecab-golang</a>の準備をしていきます。</p>\n<p>リポジトリのREADMEに記載されている通りに作業していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sh line-numbers\"><code class=\"language-sh\"># github.com/bluele/mecab-golangの準備\n$ export CGO_LDFLAGS=&quot;`mecab-config --libs`&quot;\n$ export CGO_CFLAGS=&quot;-I`mecab-config --inc-dir`&quot;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>これで準備ができました。</p>\n<h2>2.実装</h2>\n<h3>Aozora APIをCallして、書籍情報を取得する。</h3>\n<p>今回は引数に本のタイトル名を指定する事でその本の本文でWordCloudを作成します。</p>\n<p>本の情報は青空文庫のAPIを叩いてhtmlのURLを取得→スクレイピングといった感じです。（APIでテキストデータとしても取ってこれるみたいだけど今回は勉強兼ねてスクレイピングで）</p>\n<h4>青空文庫のAPIを叩く</h4>\n<p>青空文庫APIのリポジトリはこちら</p>\n<p><a href=\"https://github.com/aozorahack\">aozorahack</a>/<a href=\"https://github.com/aozorahack/pubserver2\">pubserver2</a></p>\n<p>返ってくる書籍情報のデータ構造はこちらの記事を参照しました。</p>\n<p><a href=\"https://qiita.com/ksato9700/items/48fd0eba67316d58b9d6\">青空文庫のデータ構造について-Qiita</a></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> aozora\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"encoding/json\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io/ioutil\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"net/url\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tBOOKS_ENDPOINT <span class=\"token operator\">=</span> <span class=\"token string\">\"http://pubserver2.herokuapp.com/api/v0.1/books/\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Author <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tPersonID  <span class=\"token builtin\">int</span>    <span class=\"token string\">`json:\"person_id\"`</span>\n\tLastName  <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"last_name\"`</span>\n\tFirstName <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"first_name\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> BookInfo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tBookID                      <span class=\"token builtin\">int</span>       <span class=\"token string\">`json:\"book_id\"`</span>\n\tTitle                       <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"title\"`</span>\n\tTitleYomi                   <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"title_yomi\"`</span>\n\tTitleSort                   <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"title_sort\"`</span>\n\tSubtitle                    <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"subtitle\"`</span>\n\tSubtitleYomi                <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"subtitle_yomi\"`</span>\n\tOriginalTitle               <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"original_title\"`</span>\n\tFirstAppearance             <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"first_appearance\"`</span>\n\tNDCCode                     <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"ndc_code\"`</span>\n\tFontKanaType                <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"font_kana_type\"`</span>\n\tCopyright                   <span class=\"token builtin\">bool</span>      <span class=\"token string\">`json:\"copyright\"`</span>\n\tReleaseDate                 time<span class=\"token punctuation\">.</span>Time <span class=\"token string\">`json:\"release_date\"`</span>\n\tLastModified                time<span class=\"token punctuation\">.</span>Time <span class=\"token string\">`json:\"last_modified\"`</span>\n\tCardURL                     <span class=\"token builtin\">string</span>    <span class=\"token string\">`json:\"card_url\"`</span>\n\t\n \t\t<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>略<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n  \n\tAuthors                     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Author  <span class=\"token string\">`json:\"authors\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetBookInfoByTitleName</span><span class=\"token punctuation\">(</span>titleName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\tvalues <span class=\"token operator\">:=</span> url<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> titleName<span class=\"token punctuation\">)</span>\n\turl <span class=\"token operator\">:=</span> BOOKS_ENDPOINT <span class=\"token operator\">+</span> <span class=\"token string\">\"?\"</span> <span class=\"token operator\">+</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// APIを叩いてデータを取得</span>\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"青空文庫APIのコールに失敗しました。URL：%s \\n %w\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tbody<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"レスポンスボディの読み込みに失敗しました。\\n %w\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 取得したデータを構造体にマッピング</span>\n\t<span class=\"token keyword\">var</span> bookInfos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>BookInfo\n\n\terr <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bookInfos<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"レスポンスボディを構造体にマッピングできませんでした。\\n %w\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> bookInfos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>HTMLURL<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>取得したURLから本文をスクレイピングする</h4>\n<p>ここについては、 <a href=\"https://qiita.com/uminchu987/items/07baa1a354cf96d2564b\">[Python]銀河鉄道の夜をWordCloudで可視化してみた！</a>のPythonコードをGoに直しただけです。</p>\n<p>青空文庫は文字コードがShift JISのようなので、UTF8にデコードしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> scraper\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\n\t<span class=\"token string\">\"github.com/PuerkitoBio/goquery\"</span>\n\t<span class=\"token string\">\"github.com/ogady/wordCloudMakerForAozora/pkg/decoder\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Scrape</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> goquery<span class=\"token punctuation\">.</span><span class=\"token function\">NewDocument</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Document Constructorの初期化に失敗しました。\\n %w\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\tselection <span class=\"token operator\">:=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body > div.main_text\"</span><span class=\"token punctuation\">)</span>\n\ttext <span class=\"token operator\">:=</span> selection<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// UTF8に変換</span>\n\tencodedText<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ShiftJIS\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF8変換に失敗しました。 \\n %w\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>encodedText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>形態素解析を行う</h3>\n<p>取得したテキストをMeCabを使って形態素解析を行います。</p>\n<p>抽出する品詞は<code class=\"language-text\">名詞</code>に絞る事で、その本を特徴付けるワードを抽出します。</p>\n<p>形態素解析をした結果は単語ごとにカウントし、<a href=\"https://github.com/psykhi/wordclouds\">https://github.com/psykhi/wordclouds</a> のインプットの形（<code class=\"language-text\">map[string]int</code>）にします。</p>\n<p>ここで、文章を特徴付けるために、意味のない（単語としての情報量が少ない）単語をストップワードとして取り除いています。</p>\n<p>僕は自然言語処理に関してはど素人なので、いろんな記事を参考（<a href=\"https://mieruca-ai.com/ai/nlp-stopwords/#toc_3-1\">【自然言語処理入門】日本語ストップワードの考察【品詞別】</a>など）にしたり、実際のMeCabの解析結果を見たりしながらピックアップしていきました。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> morphoAnalyzer\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"sort\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\n\t<span class=\"token string\">\"github.com/bluele/mecab-golang\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ParseToNode</span><span class=\"token punctuation\">(</span>text <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\twordMap <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\n\tm<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mecab<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-Owakati\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MeCabの初期化（分かち書き出力モード）に失敗しました。\\n %w\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> wordMap<span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\ttg<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">NewTagger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> wordMap<span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">defer</span> tg<span class=\"token punctuation\">.</span><span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tlt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">NewLattice</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> wordMap<span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">defer</span> lt<span class=\"token punctuation\">.</span><span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tnode <span class=\"token operator\">:=</span> tg<span class=\"token punctuation\">.</span><span class=\"token function\">ParseToNode</span><span class=\"token punctuation\">(</span>lt<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tfeatures <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">Feature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> features<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"名詞\"</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ストップワードを除去</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>stopWordJPN<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">Surface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// mapのkeyに単語・valueにカウントを設定し、キーに対してカウントしていく</span>\n\t\t\t\twordMap<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">Surface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> wordMap<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>sl <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> sl <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> v <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>WordCloudを生成する</h3>\n<p>いよいよWordCloudを作成します。</p>\n<p>ライブラリは<a href=\"https://github.com/psykhi/wordclouds\">psykhi/wordclouds</a>を使用させていただきました。</p>\n<p>使い方はGoDocとREADMEを見れば大体わかります。</p>\n<p>頻出単語をFontMaxSizeで表示する為、最頻出単語の文字数が多いと画像サイズを超えてしまい描画されないので、フォントサイズの設定を（かなり雑に）計算しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> wordCloud\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"flag\"</span>\n\t<span class=\"token string\">\"image\"</span>\n\t<span class=\"token string\">\"image/color\"</span>\n\n\t<span class=\"token string\">\"github.com/psykhi/wordclouds\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> MaskConf <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tFile  <span class=\"token builtin\">string</span>     <span class=\"token string\">`json:\"file\"`</span>\n\tColor color<span class=\"token punctuation\">.</span>RGBA <span class=\"token string\">`json:\"color\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Conf <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tFontMaxSize     <span class=\"token builtin\">int</span>          <span class=\"token string\">`json:\"font_max_size\"`</span>\n\tFontMinSize     <span class=\"token builtin\">int</span>          <span class=\"token string\">`json:\"font_min_size\"`</span>\n\tRandomPlacement <span class=\"token builtin\">bool</span>         <span class=\"token string\">`json:\"random_placement\"`</span>\n\tFontFile        <span class=\"token builtin\">string</span>       <span class=\"token string\">`json:\"font_file\"`</span>\n\tColors          <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>RGBA <span class=\"token string\">`json:\"colors\"`</span>\n\tWidth           <span class=\"token builtin\">int</span>          <span class=\"token string\">`json:\"width\"`</span>\n\tHeight          <span class=\"token builtin\">int</span>          <span class=\"token string\">`json:\"height\"`</span>\n\tMask            MaskConf     <span class=\"token string\">`json:\"mask\"`</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Conf<span class=\"token punctuation\">)</span> <span class=\"token function\">calcFontMaxSize</span><span class=\"token punctuation\">(</span>numOfChar <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> fontMaxSize <span class=\"token builtin\">int</span>\n\tfontMaxSize <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token function\">float32</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">/</span> <span class=\"token function\">float32</span><span class=\"token punctuation\">(</span>numOfChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> fontMaxSize\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Conf<span class=\"token punctuation\">)</span> <span class=\"token function\">calcFontMinSize</span><span class=\"token punctuation\">(</span>numOfChar <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> fontMinSize <span class=\"token builtin\">int</span>\n\tfontMinSize <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token function\">float32</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">/</span> <span class=\"token function\">float32</span><span class=\"token punctuation\">(</span>numOfChar<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> fontMinSize\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">CreateWordCloud</span><span class=\"token punctuation\">(</span>wordList <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> numOfChar <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> colorsSetting <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">)</span> image<span class=\"token punctuation\">.</span>Image <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">var</span> DefaultConf <span class=\"token operator\">=</span> Conf<span class=\"token punctuation\">{</span>\n\t\tRandomPlacement<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t\tFontFile<span class=\"token punctuation\">:</span>        <span class=\"token string\">\"./config/rounded-l-mplus-2c-medium.ttf\"</span><span class=\"token punctuation\">,</span>\n\t\tColors<span class=\"token punctuation\">:</span>          colorsSetting<span class=\"token punctuation\">,</span>\n\t\tWidth<span class=\"token punctuation\">:</span>           <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n\t\tHeight<span class=\"token punctuation\">:</span>          <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n\t\tMask<span class=\"token punctuation\">:</span> MaskConf<span class=\"token punctuation\">{</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span>\n\t\t\tR<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\tG<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\tB<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\tA<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tconf <span class=\"token operator\">:=</span> DefaultConf\n\n\t<span class=\"token keyword\">var</span> boxes <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>wordclouds<span class=\"token punctuation\">.</span>Box\n\t<span class=\"token keyword\">if</span> conf<span class=\"token punctuation\">.</span>Mask<span class=\"token punctuation\">.</span>File <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tboxes <span class=\"token operator\">=</span> wordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">Mask</span><span class=\"token punctuation\">(</span>\n\t\t\tconf<span class=\"token punctuation\">.</span>Mask<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">,</span>\n\t\t\tconf<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span>\n\t\t\tconf<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">,</span>\n\t\t\tconf<span class=\"token punctuation\">.</span>Mask<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tcolors <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> conf<span class=\"token punctuation\">.</span>Colors <span class=\"token punctuation\">{</span>\n\t\tcolors <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tw <span class=\"token operator\">:=</span> wordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">NewWordcloud</span><span class=\"token punctuation\">(</span>wordList<span class=\"token punctuation\">,</span>\n\t\twordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">FontFile</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span>FontFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\twordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">FontMaxSize</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">calcFontMaxSize</span><span class=\"token punctuation\">(</span>numOfChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\twordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">FontMinSize</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span><span class=\"token function\">calcFontMinSize</span><span class=\"token punctuation\">(</span>numOfChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\twordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">Colors</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\twordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">MaskBoxes</span><span class=\"token punctuation\">(</span>boxes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\twordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">Height</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\twordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">Width</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\twordclouds<span class=\"token punctuation\">.</span><span class=\"token function\">RandomPlacement</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">.</span>RandomPlacement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ここで描画</span>\n\timg <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> img\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>処理ロジック</h3>\n<p>ユースケースのロジックは、ただ順番にパッケージの処理を呼び出しているだけなので省略します。</p>\n<h3>main</h3>\n<p>メインはシンプルに、WordCloudCreaterを生成して<code class=\"language-text\">Execute()</code>を呼び出すだけです。</p>\n<p>描画する画像の色彩を赤系、青系、緑系、ビビッドカラーから選択できるようにしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"flag\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"github.com/ogady/wordCloudMakerForAozora/internal\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\toutput         <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"output.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"path to output image\"</span><span class=\"token punctuation\">)</span>\n\t\ttitleName      <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"銀河鉄道の夜\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"target TitleName\"</span><span class=\"token punctuation\">)</span>\n\t\tspecifiedColor <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"specify the color to draw from ’red’, ’blue’, ’green’, and ’vivid’.\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span>\n\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\trepo <span class=\"token operator\">:=</span> internal<span class=\"token punctuation\">.</span><span class=\"token function\">NewWordCloudCreater</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>output<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>titleName<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>specifiedColor<span class=\"token punctuation\">)</span>\n\terr <span class=\"token operator\">:=</span> repo<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>3. 使い方</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sh line-numbers\"><code class=\"language-sh\">$./main -h\nUsage of ./main:\n  -c string\n        specify the color to draw from ’red’undefined ’blue’undefined ’green’undefined and ’vivid’. (default &quot;red&quot;)\n  -o string\n        path to output image (default &quot;output.png&quot;)\n  -t string\n        target TitleName (default &quot;銀河鉄道の夜&quot;)\nexit status 2</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>4.生成されたWordCloud</h2>\n<p>こんな感じにできました。</p>\n<p>色とかは個人的な好みでやっているので、センス合わなかったらすいません！</p>\n<h2>後書き</h2>\n<p>普段やらないような趣味のツールとか作るとストレス解消になるし、良いですね！</p>\n<p>デザインや形態素解析の単語抽出部分でもっとよくできる部分はあったと思います。</p>\n<p>作成したものは、github上にあげています。</p>\n<p><strong><a href=\"https://github.com/ogady/wordCloudMakerForAozora\">githubリポジトリ - ogady/wordCloudMakerForAozora - </a></strong></p>\n<p>今回は自分で青空文庫APIを叩いてみましたが、作った後で青空文庫APIのGoライブラリを見つけたので紹介します！</p>\n<p><a href=\"https://github.com/spiegel-im-spiegel\">spiegel-im-spiegel</a>/<a href=\"https://github.com/spiegel-im-spiegel/aozora-api\">aozora-api</a></p>\n<p>これもいい感じで使えそうです。</p>\n<h2>参考にした記事など</h2>\n<p><a href=\"https://qiita.com/uminchu987/items/07baa1a354cf96d2564b\">[Python]銀河鉄道の夜をWordCloudで可視化してみた！</a></p>\n<p><a href=\"https://mieruca-ai.com/ai/nlp-stopwords/#toc_3-1\">【自然言語処理入門】日本語ストップワードの考察【品詞別】</a></p>\n<p><a href=\"https://ema-hiro.hatenablog.com/entry/2017/12/17/174323\">[goでmecabを動かす](https://ema-hiro.hatenablog.com/entry/2017/12/17/174323)</a></p>","frontmatter":{"title":"Goで青空文庫からWordCloud作ってみた","date":"23 November, 2018","tags":["Go"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/test/"}}}